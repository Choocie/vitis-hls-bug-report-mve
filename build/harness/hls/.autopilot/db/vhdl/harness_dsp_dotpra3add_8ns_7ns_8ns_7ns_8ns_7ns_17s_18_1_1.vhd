-- ==============================================================
-- Generated by Vitis HLS v2024.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
-- 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
-- 
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity harness_dsp_dotpra3add_8ns_7ns_8ns_7ns_8ns_7ns_17s_18_1_1 is 
    generic (
        ID         : INTEGER := 1;
        NUM_STAGE  : INTEGER := 1; 
        din0_WIDTH : INTEGER := 9;
        din1_WIDTH : INTEGER := 8;
        din2_WIDTH : INTEGER := 9;
        din3_WIDTH : INTEGER := 8;
        din4_WIDTH : INTEGER := 9;
        din5_WIDTH : INTEGER := 8;
        din6_WIDTH : INTEGER := 8;
        dout_WIDTH : INTEGER := 18
        );
    port    (
        din0  : in STD_LOGIC_VECTOR(din0_WIDTH-1 downto 0);
        din1  : in STD_LOGIC_VECTOR(din1_WIDTH-1 downto 0);
        din2  : in STD_LOGIC_VECTOR(din2_WIDTH-1 downto 0);
        din3  : in STD_LOGIC_VECTOR(din3_WIDTH-1 downto 0);
        din4  : in STD_LOGIC_VECTOR(din4_WIDTH-1 downto 0);
        din5  : in STD_LOGIC_VECTOR(din5_WIDTH-1 downto 0);
        din6  : in STD_LOGIC_VECTOR(din6_WIDTH-1 downto 0);
        dout  : out STD_LOGIC_VECTOR(dout_WIDTH-1 downto 0)
        );
end entity harness_dsp_dotpra3add_8ns_7ns_8ns_7ns_8ns_7ns_17s_18_1_1;

architecture behav of harness_dsp_dotpra3add_8ns_7ns_8ns_7ns_8ns_7ns_17s_18_1_1 is 
    signal mult0 : STD_LOGIC_VECTOR(din0_WIDTH+din1_WIDTH-1 downto 0);
    signal mult1 : STD_LOGIC_VECTOR(din2_WIDTH+din3_WIDTH-1 downto 0);
    signal mult2 : STD_LOGIC_VECTOR(din4_WIDTH+din5_WIDTH-1 downto 0);
    signal dotpr : STD_LOGIC_VECTOR(dout_WIDTH-1 downto 0);
begin
    mult0 <= std_logic_vector(signed(din0) * signed(din1));
    mult1 <= std_logic_vector(signed(din2) * signed(din3));
    mult2 <= std_logic_vector(signed(din4) * signed(din5));
    dotpr <= std_logic_vector(resize(signed(mult0) + signed(mult1) + signed(mult2) + signed(din6),dout_WIDTH));
    dout  <= dotpr;
end architecture behav;
-- 