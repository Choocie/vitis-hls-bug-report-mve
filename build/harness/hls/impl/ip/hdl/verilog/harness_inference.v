// ==============================================================
// Generated by Vitis HLS v2024.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module harness_inference (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        numEvents,
        inputStream_0_dout,
        inputStream_0_empty_n,
        inputStream_0_read,
        inputStream_0_num_data_valid,
        inputStream_0_fifo_cap,
        inputStream_1_dout,
        inputStream_1_empty_n,
        inputStream_1_read,
        inputStream_1_num_data_valid,
        inputStream_1_fifo_cap,
        outputStream_0_din,
        outputStream_0_full_n,
        outputStream_0_write,
        outputStream_0_num_data_valid,
        outputStream_0_fifo_cap,
        outputStream_1_din,
        outputStream_1_full_n,
        outputStream_1_write,
        outputStream_1_num_data_valid,
        outputStream_1_fifo_cap,
        lastStream_din,
        lastStream_full_n,
        lastStream_almost_full_n,
        lastStream_write,
        lastStream_num_data_valid,
        lastStream_fifo_cap,
        lastStream_1_din,
        lastStream_1_full_n,
        lastStream_1_almost_full_n,
        lastStream_1_write,
        lastStream_1_num_data_valid,
        lastStream_1_fifo_cap,
        numStream_dout,
        numStream_empty_n,
        numStream_read,
        numStream_num_data_valid,
        numStream_fifo_cap
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] numEvents;
input  [295:0] inputStream_0_dout;
input   inputStream_0_empty_n;
output   inputStream_0_read;
input  [2:0] inputStream_0_num_data_valid;
input  [2:0] inputStream_0_fifo_cap;
input  [295:0] inputStream_1_dout;
input   inputStream_1_empty_n;
output   inputStream_1_read;
input  [2:0] inputStream_1_num_data_valid;
input  [2:0] inputStream_1_fifo_cap;
output  [127:0] outputStream_0_din;
input   outputStream_0_full_n;
output   outputStream_0_write;
input  [31:0] outputStream_0_num_data_valid;
input  [31:0] outputStream_0_fifo_cap;
output  [127:0] outputStream_1_din;
input   outputStream_1_full_n;
output   outputStream_1_write;
input  [31:0] outputStream_1_num_data_valid;
input  [31:0] outputStream_1_fifo_cap;
output  [0:0] lastStream_din;
input   lastStream_full_n;
input   lastStream_almost_full_n;
output   lastStream_write;
input  [31:0] lastStream_num_data_valid;
input  [31:0] lastStream_fifo_cap;
output  [0:0] lastStream_1_din;
input   lastStream_1_full_n;
input   lastStream_1_almost_full_n;
output   lastStream_1_write;
input  [31:0] lastStream_1_num_data_valid;
input  [31:0] lastStream_1_fifo_cap;
input  [31:0] numStream_dout;
input   numStream_empty_n;
output   numStream_read;
input  [13:0] numStream_num_data_valid;
input  [13:0] numStream_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] empty_fu_80_p1;
reg   [30:0] empty_reg_115;
reg    ap_block_state1;
wire    grp_dut_fu_62_inputStream_0_read;
wire    grp_dut_fu_62_inputStream_1_read;
wire   [127:0] grp_dut_fu_62_outputStream_0_din;
wire    grp_dut_fu_62_outputStream_0_write;
wire   [127:0] grp_dut_fu_62_outputStream_1_din;
wire    grp_dut_fu_62_outputStream_1_write;
wire   [0:0] grp_dut_fu_62_lastStream_0_din;
wire    grp_dut_fu_62_lastStream_0_write;
wire   [0:0] grp_dut_fu_62_lastStream_1_din;
wire    grp_dut_fu_62_lastStream_1_write;
wire    grp_dut_fu_62_numStream_read;
wire    grp_dut_fu_62_ap_start;
wire    grp_dut_fu_62_outputStream_0_read;
wire    grp_dut_fu_62_outputStream_1_read;
wire    grp_dut_fu_62_lastStream_0_read;
wire    grp_dut_fu_62_lastStream_1_read;
wire    grp_dut_fu_62_ap_done;
wire    grp_dut_fu_62_ap_ready;
wire    grp_dut_fu_62_ap_idle;
reg    grp_dut_fu_62_ap_continue;
reg    grp_dut_fu_62_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln87_fu_98_p2;
wire    ap_CS_fsm_state3;
reg    ap_sync_reg_grp_dut_fu_62_ap_ready;
reg    ap_sync_reg_grp_dut_fu_62_ap_done;
reg    ap_block_state3_on_subcall_done;
wire    ap_sync_grp_dut_fu_62_ap_ready;
reg   [30:0] e_fu_52;
wire   [30:0] e_4_fu_92_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_dut_fu_62_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dut_fu_62_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dut_fu_62_ap_done = 1'b0;
#0 e_fu_52 = 31'd0;
end

harness_dut grp_dut_fu_62(
    .inputStream_0_dout(inputStream_0_dout),
    .inputStream_0_empty_n(inputStream_0_empty_n),
    .inputStream_0_read(grp_dut_fu_62_inputStream_0_read),
    .inputStream_1_dout(inputStream_1_dout),
    .inputStream_1_empty_n(inputStream_1_empty_n),
    .inputStream_1_read(grp_dut_fu_62_inputStream_1_read),
    .outputStream_0_din(grp_dut_fu_62_outputStream_0_din),
    .outputStream_0_full_n(outputStream_0_full_n),
    .outputStream_0_write(grp_dut_fu_62_outputStream_0_write),
    .outputStream_1_din(grp_dut_fu_62_outputStream_1_din),
    .outputStream_1_full_n(outputStream_1_full_n),
    .outputStream_1_write(grp_dut_fu_62_outputStream_1_write),
    .lastStream_0_din(grp_dut_fu_62_lastStream_0_din),
    .lastStream_0_full_n(lastStream_full_n),
    .lastStream_0_write(grp_dut_fu_62_lastStream_0_write),
    .lastStream_1_din(grp_dut_fu_62_lastStream_1_din),
    .lastStream_1_full_n(lastStream_1_full_n),
    .lastStream_1_write(grp_dut_fu_62_lastStream_1_write),
    .numStream_dout(numStream_dout),
    .numStream_empty_n(numStream_empty_n),
    .numStream_read(grp_dut_fu_62_numStream_read),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dut_fu_62_ap_start),
    .outputStream_0_dout(128'd0),
    .outputStream_0_empty_n(1'b1),
    .outputStream_0_read(grp_dut_fu_62_outputStream_0_read),
    .outputStream_0_num_data_valid(outputStream_0_num_data_valid),
    .outputStream_0_fifo_cap(outputStream_0_fifo_cap),
    .outputStream_1_dout(128'd0),
    .outputStream_1_empty_n(1'b1),
    .outputStream_1_read(grp_dut_fu_62_outputStream_1_read),
    .outputStream_1_num_data_valid(outputStream_1_num_data_valid),
    .outputStream_1_fifo_cap(outputStream_1_fifo_cap),
    .lastStream_0_almost_full_n(lastStream_almost_full_n),
    .lastStream_0_dout(1'd0),
    .lastStream_0_empty_n(1'b1),
    .lastStream_0_almost_empty_n(1'b1),
    .lastStream_0_read(grp_dut_fu_62_lastStream_0_read),
    .lastStream_0_num_data_valid(lastStream_num_data_valid),
    .lastStream_0_fifo_cap(lastStream_fifo_cap),
    .lastStream_1_almost_full_n(lastStream_1_almost_full_n),
    .lastStream_1_dout(1'd0),
    .lastStream_1_empty_n(1'b1),
    .lastStream_1_almost_empty_n(1'b1),
    .lastStream_1_read(grp_dut_fu_62_lastStream_1_read),
    .lastStream_1_num_data_valid(lastStream_1_num_data_valid),
    .lastStream_1_fifo_cap(lastStream_1_fifo_cap),
    .ap_done(grp_dut_fu_62_ap_done),
    .ap_ready(grp_dut_fu_62_ap_ready),
    .ap_idle(grp_dut_fu_62_ap_idle),
    .ap_continue(grp_dut_fu_62_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_98_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dut_fu_62_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dut_fu_62_ap_done <= 1'b0;
        end else if ((grp_dut_fu_62_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dut_fu_62_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dut_fu_62_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_dut_fu_62_ap_ready <= 1'b0;
        end else if ((grp_dut_fu_62_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dut_fu_62_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dut_fu_62_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (ap_sync_grp_dut_fu_62_ap_ready == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_98_p2 == 1'd0)))) begin
            grp_dut_fu_62_ap_start_reg <= 1'b1;
        end else if ((grp_dut_fu_62_ap_ready == 1'b1)) begin
            grp_dut_fu_62_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_fu_52 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_98_p2 == 1'd0))) begin
        e_fu_52 <= e_4_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_115 <= empty_fu_80_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_98_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_98_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_dut_fu_62_ap_continue = 1'b1;
    end else begin
        grp_dut_fu_62_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln87_fu_98_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_reg_grp_dut_fu_62_ap_ready & ap_sync_reg_grp_dut_fu_62_ap_done) == 1'b0);
end

assign ap_sync_grp_dut_fu_62_ap_ready = (grp_dut_fu_62_ap_ready | ap_sync_reg_grp_dut_fu_62_ap_ready);

assign e_4_fu_92_p2 = (e_fu_52 + 31'd1);

assign empty_fu_80_p1 = numEvents[30:0];

assign grp_dut_fu_62_ap_start = grp_dut_fu_62_ap_start_reg;

assign icmp_ln87_fu_98_p2 = ((e_fu_52 == empty_reg_115) ? 1'b1 : 1'b0);

assign inputStream_0_read = grp_dut_fu_62_inputStream_0_read;

assign inputStream_1_read = grp_dut_fu_62_inputStream_1_read;

assign lastStream_1_din = grp_dut_fu_62_lastStream_1_din;

assign lastStream_1_write = grp_dut_fu_62_lastStream_1_write;

assign lastStream_din = grp_dut_fu_62_lastStream_0_din;

assign lastStream_write = grp_dut_fu_62_lastStream_0_write;

assign numStream_read = grp_dut_fu_62_numStream_read;

assign outputStream_0_din = grp_dut_fu_62_outputStream_0_din;

assign outputStream_0_write = grp_dut_fu_62_outputStream_0_write;

assign outputStream_1_din = grp_dut_fu_62_outputStream_1_din;

assign outputStream_1_write = grp_dut_fu_62_outputStream_1_write;

endmodule //harness_inference
