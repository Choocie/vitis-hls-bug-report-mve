// ==============================================================
// Generated by Vitis HLS v2024.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module harness_filter_array_ap_ufixed_8_3_5_3_0_16ul_2_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        multicastNumStream_1_dout,
        multicastNumStream_1_empty_n,
        multicastNumStream_1_read,
        multicastNumStream_1_num_data_valid,
        multicastNumStream_1_fifo_cap,
        lastStream_0_din,
        lastStream_0_full_n,
        lastStream_0_write,
        lastStream_0_num_data_valid,
        lastStream_0_fifo_cap,
        lastStream_1_din,
        lastStream_1_full_n,
        lastStream_1_write,
        lastStream_1_num_data_valid,
        lastStream_1_fifo_cap,
        dense11Stream_0_dout,
        dense11Stream_0_empty_n,
        dense11Stream_0_read,
        dense11Stream_0_num_data_valid,
        dense11Stream_0_fifo_cap,
        outputStream_0_din,
        outputStream_0_full_n,
        outputStream_0_write,
        outputStream_0_num_data_valid,
        outputStream_0_fifo_cap,
        dense11Stream_1_dout,
        dense11Stream_1_empty_n,
        dense11Stream_1_read,
        dense11Stream_1_num_data_valid,
        dense11Stream_1_fifo_cap,
        outputStream_1_din,
        outputStream_1_full_n,
        outputStream_1_write,
        outputStream_1_num_data_valid,
        outputStream_1_fifo_cap,
        lastStream_0_almost_full_n,
        lastStream_1_almost_full_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] multicastNumStream_1_dout;
input   multicastNumStream_1_empty_n;
output   multicastNumStream_1_read;
input  [5:0] multicastNumStream_1_num_data_valid;
input  [5:0] multicastNumStream_1_fifo_cap;
output  [0:0] lastStream_0_din;
input   lastStream_0_full_n;
output   lastStream_0_write;
input  [31:0] lastStream_0_num_data_valid;
input  [31:0] lastStream_0_fifo_cap;
output  [0:0] lastStream_1_din;
input   lastStream_1_full_n;
output   lastStream_1_write;
input  [31:0] lastStream_1_num_data_valid;
input  [31:0] lastStream_1_fifo_cap;
input  [127:0] dense11Stream_0_dout;
input   dense11Stream_0_empty_n;
output   dense11Stream_0_read;
input  [2:0] dense11Stream_0_num_data_valid;
input  [2:0] dense11Stream_0_fifo_cap;
output  [127:0] outputStream_0_din;
input   outputStream_0_full_n;
output   outputStream_0_write;
input  [31:0] outputStream_0_num_data_valid;
input  [31:0] outputStream_0_fifo_cap;
input  [127:0] dense11Stream_1_dout;
input   dense11Stream_1_empty_n;
output   dense11Stream_1_read;
input  [2:0] dense11Stream_1_num_data_valid;
input  [2:0] dense11Stream_1_fifo_cap;
output  [127:0] outputStream_1_din;
input   outputStream_1_full_n;
output   outputStream_1_write;
input  [31:0] outputStream_1_num_data_valid;
input  [31:0] outputStream_1_fifo_cap;
input   lastStream_0_almost_full_n;
input   lastStream_1_almost_full_n;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln63_reg_252;
reg    ap_block_state2_pp0_stage0_iter1_grp1;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] cmp11_reg_256;
wire   [0:0] cmp11_fu_144_p2;
reg    ap_block_pp0_stage0_11001;
reg    ap_predicate_pre_block_op37;
reg    ap_predicate_pre_block_op40;
reg    ap_block_IOBlock_state2_reg_grp2;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
reg    ap_predicate_pre_block_op43;
reg    ap_predicate_pre_block_op46;
reg    ap_block_IOBlock_state2_reg_grp3;
reg    ap_block_pp0_stage0_subdone_grp3_done_reg;
reg    ap_block_pp0_stage0_subdone_grp3;
reg   [0:0] icmp_ln70_reg_260;
reg   [0:0] icmp_ln70_1_reg_264;
reg    ap_block_state4_pp0_stage0_iter3_grp1;
wire   [0:0] icmp_ln60_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dense11Stream_0_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    dense11Stream_1_blk_n;
reg    multicastNumStream_1_blk_n;
reg    outputStream_0_blk_n;
reg    outputStream_1_blk_n;
reg    ap_block_IOBlock_op40_n;
reg    lastStream_0_blk_n;
wire    ap_block_pp0_stage0_grp2;
reg    ap_block_IOBlock_op37_n;
reg    ap_block_IOBlock_op43_n;
reg    lastStream_1_blk_n;
wire    ap_block_pp0_stage0_grp3;
reg    ap_block_IOBlock_op46_n;
reg    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0;
reg   [4:0] ii_1_reg_242;
reg   [4:0] ii_1_reg_242_pp0_iter1_reg;
wire   [0:0] icmp_ln63_fu_138_p2;
wire   [0:0] icmp_ln70_fu_193_p2;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [0:0] icmp_ln70_1_fu_211_p2;
reg   [4:0] ii_fu_58;
wire   [4:0] ii_2_fu_126_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_ii_1;
wire    ap_block_pp0_stage0;
reg   [31:0] num_fu_62;
reg    multicastNumStream_1_read_local;
reg   [0:0] lastStream_0_din_local;
reg    ap_block_pp0_stage0_01001_grp2;
reg    lastStream_0_write_local;
reg    ap_block_pp0_stage0_11001_grp2;
reg   [0:0] lastStream_1_din_local;
reg    ap_block_pp0_stage0_01001_grp3;
reg    lastStream_1_write_local;
reg    ap_block_pp0_stage0_11001_grp3;
reg    dense11Stream_0_read_local;
reg    ap_block_pp0_stage0_01001_grp1;
reg    outputStream_0_write_local;
reg    dense11Stream_1_read_local;
reg    outputStream_1_write_local;
wire   [4:0] empty_66_fu_184_p2;
wire   [31:0] mul_cast_fu_189_p1;
wire   [3:0] empty_fu_181_p1;
wire   [4:0] or_ln_fu_199_p3;
wire   [31:0] zext_ln70_fu_207_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_260;
reg    ap_condition_436;
reg    ap_condition_439;
reg    ap_condition_444;
reg    ap_condition_447;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp3_done_reg = 1'b0;
#0 ii_fu_58 = 5'd0;
#0 num_fu_62 = 32'd0;
end

harness_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
            ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
            ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp3)) begin
            ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((lastStream_0_almost_full_n == 1'b0)) begin
        ap_block_IOBlock_op37_n <= 1'b0;
    end else begin
        ap_block_IOBlock_op37_n <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((lastStream_0_almost_full_n == 1'b0)) begin
        ap_block_IOBlock_op40_n <= 1'b0;
    end else begin
        ap_block_IOBlock_op40_n <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((lastStream_1_almost_full_n == 1'b0)) begin
        ap_block_IOBlock_op43_n <= 1'b0;
    end else begin
        ap_block_IOBlock_op43_n <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((lastStream_1_almost_full_n == 1'b0)) begin
        ap_block_IOBlock_op46_n <= 1'b0;
    end else begin
        ap_block_IOBlock_op46_n <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_predicate_pre_block_op40 == 1'b1) & (lastStream_0_almost_full_n == 1'b0)) | ((ap_predicate_pre_block_op37 == 1'b1) & (lastStream_0_almost_full_n == 1'b0)))) begin
        ap_block_IOBlock_state2_reg_grp2 <= 1'b1;
    end else begin
        ap_block_IOBlock_state2_reg_grp2 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_predicate_pre_block_op46 == 1'b1) & (lastStream_1_almost_full_n == 1'b0)) | ((ap_predicate_pre_block_op43 == 1'b1) & (lastStream_1_almost_full_n == 1'b0)))) begin
        ap_block_IOBlock_state2_reg_grp3 <= 1'b1;
    end else begin
        ap_block_IOBlock_state2_reg_grp3 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_260)) begin
        if ((icmp_ln60_fu_132_p2 == 1'd0)) begin
            ii_fu_58 <= ii_2_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ii_fu_58 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        cmp11_reg_256 <= cmp11_fu_144_p2;
        icmp_ln63_reg_252 <= icmp_ln63_fu_138_p2;
        ii_1_reg_242 <= ap_sig_allocacmp_ii_1;
        ii_1_reg_242_pp0_iter1_reg <= ii_1_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        icmp_ln70_1_reg_264 <= icmp_ln70_1_fu_211_p2;
        icmp_ln70_reg_260 <= icmp_ln70_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln63_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        num_fu_62 <= multicastNumStream_1_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln60_fu_132_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_predicate_pre_block_op37 = (cmp11_fu_144_p2 == 1'd0);
    end else begin
        ap_predicate_pre_block_op37 = (cmp11_reg_256 == 1'd0);
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_predicate_pre_block_op40 = (cmp11_fu_144_p2 == 1'd1);
    end else begin
        ap_predicate_pre_block_op40 = (cmp11_reg_256 == 1'd1);
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_predicate_pre_block_op43 = (cmp11_fu_144_p2 == 1'd0);
    end else begin
        ap_predicate_pre_block_op43 = (cmp11_reg_256 == 1'd0);
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_predicate_pre_block_op46 = (cmp11_fu_144_p2 == 1'd1);
    end else begin
        ap_predicate_pre_block_op46 = (cmp11_reg_256 == 1'd1);
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ii_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_ii_1 = ii_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense11Stream_0_blk_n = dense11Stream_0_empty_n;
    end else begin
        dense11Stream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense11Stream_0_read_local = 1'b1;
    end else begin
        dense11Stream_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense11Stream_1_blk_n = dense11Stream_1_empty_n;
    end else begin
        dense11Stream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense11Stream_1_read_local = 1'b1;
    end else begin
        dense11Stream_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_436)) begin
        if ((cmp11_reg_256 == 1'd0)) begin
            lastStream_0_blk_n = ap_block_IOBlock_op37_n;
        end else if ((cmp11_reg_256 == 1'd1)) begin
            lastStream_0_blk_n = ap_block_IOBlock_op40_n;
        end else begin
            lastStream_0_blk_n = 1'b1;
        end
    end else begin
        lastStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_439)) begin
        if ((cmp11_reg_256 == 1'd1)) begin
            lastStream_0_din_local = 1'd1;
        end else if ((cmp11_reg_256 == 1'd0)) begin
            lastStream_0_din_local = 1'd0;
        end else begin
            lastStream_0_din_local = 'bx;
        end
    end else begin
        lastStream_0_din_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp11_reg_256 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp11_reg_256 == 1'd0)))) begin
        lastStream_0_write_local = 1'b1;
    end else begin
        lastStream_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_444)) begin
        if ((cmp11_reg_256 == 1'd1)) begin
            lastStream_1_blk_n = ap_block_IOBlock_op46_n;
        end else if ((cmp11_reg_256 == 1'd0)) begin
            lastStream_1_blk_n = ap_block_IOBlock_op43_n;
        end else begin
            lastStream_1_blk_n = 1'b1;
        end
    end else begin
        lastStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_447)) begin
        if ((cmp11_reg_256 == 1'd1)) begin
            lastStream_1_din_local = 1'd1;
        end else if ((cmp11_reg_256 == 1'd0)) begin
            lastStream_1_din_local = 1'd0;
        end else begin
            lastStream_1_din_local = 'bx;
        end
    end else begin
        lastStream_1_din_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp11_reg_256 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp11_reg_256 == 1'd0)))) begin
        lastStream_1_write_local = 1'b1;
    end else begin
        lastStream_1_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln63_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        multicastNumStream_1_blk_n = multicastNumStream_1_empty_n;
    end else begin
        multicastNumStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln63_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        multicastNumStream_1_read_local = 1'b1;
    end else begin
        multicastNumStream_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln70_reg_260 == 1'd1))) begin
        outputStream_0_blk_n = outputStream_0_full_n;
    end else begin
        outputStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln70_reg_260 == 1'd1))) begin
        outputStream_0_write_local = 1'b1;
    end else begin
        outputStream_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln70_1_reg_264 == 1'd1))) begin
        outputStream_1_blk_n = outputStream_1_full_n;
    end else begin
        outputStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln70_1_reg_264 == 1'd1))) begin
        outputStream_1_write_local = 1'b1;
    end else begin
        outputStream_1_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp2 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_IOBlock_state2_reg_grp2)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001_grp3 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_IOBlock_state2_reg_grp3)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b1 == ap_block_IOBlock_state2_reg_grp3)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_IOBlock_state2_reg_grp2)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)))) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp0 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_IOBlock_state2_reg_grp2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp3 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_IOBlock_state2_reg_grp3)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b1 == ap_block_IOBlock_state2_reg_grp3)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b1 == ap_block_IOBlock_state2_reg_grp2)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)))) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp0 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3_grp1)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_IOBlock_state2_reg_grp2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp3 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_IOBlock_state2_reg_grp3)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp1 = ((icmp_ln63_reg_252 == 1'd1) & (multicastNumStream_1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3_grp1 = ((dense11Stream_1_empty_n == 1'b0) | (dense11Stream_0_empty_n == 1'b0) | ((outputStream_1_full_n == 1'b0) & (icmp_ln70_1_reg_264 == 1'd1)) | ((outputStream_0_full_n == 1'b0) & (icmp_ln70_reg_260 == 1'd1)));
end

always @ (*) begin
    ap_condition_260 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_436 = ((1'b0 == ap_block_pp0_stage0_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_439 = ((1'b0 == ap_block_pp0_stage0_01001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_444 = ((1'b0 == ap_block_pp0_stage0_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_447 = ((1'b0 == ap_block_pp0_stage0_01001_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cmp11_fu_144_p2 = ((ap_sig_allocacmp_ii_1 == 5'd15) ? 1'b1 : 1'b0);

assign dense11Stream_0_read = dense11Stream_0_read_local;

assign dense11Stream_1_read = dense11Stream_1_read_local;

assign empty_66_fu_184_p2 = ii_1_reg_242_pp0_iter1_reg << 5'd1;

assign empty_fu_181_p1 = ii_1_reg_242_pp0_iter1_reg[3:0];

assign icmp_ln60_fu_132_p2 = ((ap_sig_allocacmp_ii_1 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_138_p2 = ((ap_sig_allocacmp_ii_1 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_211_p2 = (($signed(zext_ln70_fu_207_p1) < $signed(num_fu_62)) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_193_p2 = (($signed(mul_cast_fu_189_p1) < $signed(num_fu_62)) ? 1'b1 : 1'b0);

assign ii_2_fu_126_p2 = (ap_sig_allocacmp_ii_1 + 5'd1);

assign lastStream_0_din = lastStream_0_din_local;

assign lastStream_0_write = lastStream_0_write_local;

assign lastStream_1_din = lastStream_1_din_local;

assign lastStream_1_write = lastStream_1_write_local;

assign mul_cast_fu_189_p1 = empty_66_fu_184_p2;

assign multicastNumStream_1_read = multicastNumStream_1_read_local;

assign or_ln_fu_199_p3 = {{empty_fu_181_p1}, {1'd1}};

assign outputStream_0_din = dense11Stream_0_dout;

assign outputStream_0_write = outputStream_0_write_local;

assign outputStream_1_din = dense11Stream_1_dout;

assign outputStream_1_write = outputStream_1_write_local;

assign zext_ln70_fu_207_p1 = or_ln_fu_199_p3;

endmodule //harness_filter_array_ap_ufixed_8_3_5_3_0_16ul_2_16_s
