// ==============================================================
// Generated by Vitis HLS v2024.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module harness_multicast_int_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        numStream_dout,
        numStream_empty_n,
        numStream_read,
        numStream_num_data_valid,
        numStream_fifo_cap,
        multicastNumStream_0_din,
        multicastNumStream_0_full_n,
        multicastNumStream_0_write,
        multicastNumStream_0_num_data_valid,
        multicastNumStream_0_fifo_cap,
        multicastNumStream_1_din,
        multicastNumStream_1_full_n,
        multicastNumStream_1_write,
        multicastNumStream_1_num_data_valid,
        multicastNumStream_1_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] numStream_dout;
input   numStream_empty_n;
output   numStream_read;
input  [13:0] numStream_num_data_valid;
input  [13:0] numStream_fifo_cap;
output  [31:0] multicastNumStream_0_din;
input   multicastNumStream_0_full_n;
output   multicastNumStream_0_write;
input  [5:0] multicastNumStream_0_num_data_valid;
input  [5:0] multicastNumStream_0_fifo_cap;
output  [31:0] multicastNumStream_1_din;
input   multicastNumStream_1_full_n;
output   multicastNumStream_1_write;
input  [5:0] multicastNumStream_1_num_data_valid;
input  [5:0] multicastNumStream_1_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    numStream_blk_n;
reg    multicastNumStream_0_blk_n;
reg    multicastNumStream_1_blk_n;
reg    ap_block_state1;
reg    numStream_read_local;
reg    multicastNumStream_0_write_local;
reg    multicastNumStream_1_write_local;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        multicastNumStream_0_blk_n = multicastNumStream_0_full_n;
    end else begin
        multicastNumStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        multicastNumStream_0_write_local = 1'b1;
    end else begin
        multicastNumStream_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        multicastNumStream_1_blk_n = multicastNumStream_1_full_n;
    end else begin
        multicastNumStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        multicastNumStream_1_write_local = 1'b1;
    end else begin
        multicastNumStream_1_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        numStream_blk_n = numStream_empty_n;
    end else begin
        numStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        numStream_read_local = 1'b1;
    end else begin
        numStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (multicastNumStream_1_full_n == 1'b0) | (multicastNumStream_0_full_n == 1'b0) | (numStream_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign multicastNumStream_0_din = numStream_dout;

assign multicastNumStream_0_write = multicastNumStream_0_write_local;

assign multicastNumStream_1_din = numStream_dout;

assign multicastNumStream_1_write = multicastNumStream_1_write_local;

assign numStream_read = numStream_read_local;

assign start_out = real_start;

endmodule //harness_multicast_int_2_s
