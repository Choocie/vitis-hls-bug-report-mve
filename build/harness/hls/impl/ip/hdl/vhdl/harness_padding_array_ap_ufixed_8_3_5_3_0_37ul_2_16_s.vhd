-- ==============================================================
-- Generated by Vitis HLS v2024.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity harness_padding_array_ap_ufixed_8_3_5_3_0_37ul_2_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    multicastNumStream_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    multicastNumStream_0_empty_n : IN STD_LOGIC;
    multicastNumStream_0_read : OUT STD_LOGIC;
    multicastNumStream_0_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    multicastNumStream_0_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    paddingStream_0_din : OUT STD_LOGIC_VECTOR (295 downto 0);
    paddingStream_0_full_n : IN STD_LOGIC;
    paddingStream_0_write : OUT STD_LOGIC;
    paddingStream_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    paddingStream_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_0_dout : IN STD_LOGIC_VECTOR (295 downto 0);
    inputStream_0_empty_n : IN STD_LOGIC;
    inputStream_0_read : OUT STD_LOGIC;
    inputStream_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    paddingStream_1_din : OUT STD_LOGIC_VECTOR (295 downto 0);
    paddingStream_1_full_n : IN STD_LOGIC;
    paddingStream_1_write : OUT STD_LOGIC;
    paddingStream_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    paddingStream_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_1_dout : IN STD_LOGIC_VECTOR (295 downto 0);
    inputStream_1_empty_n : IN STD_LOGIC;
    inputStream_1_read : OUT STD_LOGIC;
    inputStream_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    paddingStream_0_almost_full_n : IN STD_LOGIC;
    paddingStream_1_almost_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of harness_padding_array_ap_ufixed_8_3_5_3_0_37ul_2_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv296_lc_1 : STD_LOGIC_VECTOR (295 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal icmp_ln88_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal icmp_ln91_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln98_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_predicate_pre_block_op40 : BOOLEAN;
    signal ap_predicate_pre_block_op45 : BOOLEAN;
    signal icmp_ln98_1_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_pre_block_op48 : BOOLEAN;
    signal ap_predicate_pre_block_op53 : BOOLEAN;
    signal ap_block_IOBlock_state5_reg_grp1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_grp1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal inputStream_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal inputStream_1_blk_n : STD_LOGIC;
    signal multicastNumStream_0_blk_n : STD_LOGIC;
    signal ap_block_IOBlock_op45_n : STD_LOGIC;
    signal paddingStream_0_blk_n : STD_LOGIC;
    signal ap_block_IOBlock_op40_n : STD_LOGIC;
    signal ap_block_IOBlock_op48_n : STD_LOGIC;
    signal paddingStream_1_blk_n : STD_LOGIC;
    signal ap_block_IOBlock_op53_n : STD_LOGIC;
    signal ii1_reg_107 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii1_reg_107_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_fu_122_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln91_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_223_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_223_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_ii1_phi_fu_111_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal num2_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal multicastNumStream_0_read_local : STD_LOGIC;
    signal paddingStream_0_din_local : STD_LOGIC_VECTOR (295 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal paddingStream_0_write_local : STD_LOGIC;
    signal inputStream_0_read_local : STD_LOGIC;
    signal paddingStream_1_din_local : STD_LOGIC_VECTOR (295 downto 0);
    signal paddingStream_1_write_local : STD_LOGIC;
    signal inputStream_1_read_local : STD_LOGIC;
    signal tmp_fu_150_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln98_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_168_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln98_1_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_205 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_223_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_block_IOBlock_op40_n_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((paddingStream_0_almost_full_n = ap_const_logic_0)) then 
                ap_block_IOBlock_op40_n <= ap_const_logic_0;
            else 
                ap_block_IOBlock_op40_n <= ap_const_logic_1;
            end if; 
        end if;
    end process;

    ap_block_IOBlock_op45_n_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((paddingStream_0_almost_full_n = ap_const_logic_0)) then 
                ap_block_IOBlock_op45_n <= ap_const_logic_0;
            else 
                ap_block_IOBlock_op45_n <= ap_const_logic_1;
            end if; 
        end if;
    end process;

    ap_block_IOBlock_op48_n_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((paddingStream_1_almost_full_n = ap_const_logic_0)) then 
                ap_block_IOBlock_op48_n <= ap_const_logic_0;
            else 
                ap_block_IOBlock_op48_n <= ap_const_logic_1;
            end if; 
        end if;
    end process;

    ap_block_IOBlock_op53_n_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((paddingStream_1_almost_full_n = ap_const_logic_0)) then 
                ap_block_IOBlock_op53_n <= ap_const_logic_0;
            else 
                ap_block_IOBlock_op53_n <= ap_const_logic_1;
            end if; 
        end if;
    end process;

    ap_block_IOBlock_state5_reg_grp1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_predicate_pre_block_op40 = ap_const_boolean_1) and (paddingStream_0_almost_full_n = ap_const_logic_0)) or ((ap_predicate_pre_block_op53 = ap_const_boolean_1) and (paddingStream_1_almost_full_n = ap_const_logic_0)) or ((ap_predicate_pre_block_op48 = ap_const_boolean_1) and (paddingStream_1_almost_full_n = ap_const_logic_0)) or ((ap_predicate_pre_block_op45 = ap_const_boolean_1) and (paddingStream_0_almost_full_n = ap_const_logic_0)))) then 
                ap_block_IOBlock_state5_reg_grp1 <= ap_const_boolean_1;
            else 
                ap_block_IOBlock_state5_reg_grp1 <= ap_const_boolean_0;
            end if; 
        end if;
    end process;

    ii1_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_reg_223 = ap_const_lv1_0))) then 
                ii1_reg_107 <= ii_reg_214;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_reg_223 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                ii1_reg_107 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln88_reg_223 <= icmp_ln88_fu_134_p2;
                icmp_ln88_reg_223_pp0_iter1_reg <= icmp_ln88_reg_223;
                icmp_ln91_reg_219 <= icmp_ln91_fu_128_p2;
                ii1_reg_107_pp0_iter1_reg <= ii1_reg_107;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln88_reg_223_pp0_iter2_reg <= icmp_ln88_reg_223_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                icmp_ln98_1_reg_231 <= icmp_ln98_1_fu_180_p2;
                icmp_ln98_reg_227 <= icmp_ln98_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ii_reg_214 <= ii_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                num2_fu_52 <= multicastNumStream_0_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_done_reg, ap_block_state3_pp0_stage0_iter1_grp1, ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter3_grp1, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1)) or ((ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter3_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_block_state3_pp0_stage0_iter1_grp1, ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter3_grp1, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1)) or ((ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter3_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_done_reg, ap_block_state3_pp0_stage0_iter1_grp1, ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter3_grp1, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1)) or ((ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter3_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_block_state3_pp0_stage0_iter1_grp1, ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter3_grp1, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1_grp1)) or ((ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter3_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_pp0_stage0_iter1_grp1_assign_proc : process(multicastNumStream_0_empty_n, icmp_ln91_reg_219)
    begin
                ap_block_state3_pp0_stage0_iter1_grp1 <= ((icmp_ln91_reg_219 = ap_const_lv1_1) and (multicastNumStream_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter3_grp1_assign_proc : process(inputStream_0_empty_n, inputStream_1_empty_n, icmp_ln98_reg_227, icmp_ln98_1_reg_231, ap_block_IOBlock_state5_reg_grp1)
    begin
                ap_block_state5_pp0_stage0_iter3_grp1 <= ((ap_const_boolean_1 = ap_block_IOBlock_state5_reg_grp1) or ((icmp_ln98_reg_227 = ap_const_lv1_1) and (inputStream_0_empty_n = ap_const_logic_0)) or ((inputStream_1_empty_n = ap_const_logic_0) and (icmp_ln98_1_reg_231 = ap_const_lv1_1)));
    end process;


    ap_condition_205_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_205 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3, icmp_ln88_reg_223_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_reg_223_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ii1_phi_fu_111_p6_assign_proc : process(ii1_reg_107, ii_reg_214, icmp_ln88_reg_223, ap_condition_205)
    begin
        if ((ap_const_boolean_1 = ap_condition_205)) then
            if ((icmp_ln88_reg_223 = ap_const_lv1_1)) then 
                ap_phi_mux_ii1_phi_fu_111_p6 <= ap_const_lv4_0;
            elsif ((icmp_ln88_reg_223 = ap_const_lv1_0)) then 
                ap_phi_mux_ii1_phi_fu_111_p6 <= ii_reg_214;
            else 
                ap_phi_mux_ii1_phi_fu_111_p6 <= ii1_reg_107;
            end if;
        else 
            ap_phi_mux_ii1_phi_fu_111_p6 <= ii1_reg_107;
        end if; 
    end process;


    ap_predicate_pre_block_op40_assign_proc : process(icmp_ln98_reg_227, icmp_ln98_fu_162_p2, ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_predicate_pre_block_op40 <= (icmp_ln98_fu_162_p2 = ap_const_lv1_0);
        else 
                        ap_predicate_pre_block_op40 <= (icmp_ln98_reg_227 = ap_const_lv1_0);
        end if; 
    end process;


    ap_predicate_pre_block_op45_assign_proc : process(icmp_ln98_reg_227, icmp_ln98_fu_162_p2, ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_predicate_pre_block_op45 <= (icmp_ln98_fu_162_p2 = ap_const_lv1_1);
        else 
                        ap_predicate_pre_block_op45 <= (icmp_ln98_reg_227 = ap_const_lv1_1);
        end if; 
    end process;


    ap_predicate_pre_block_op48_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln98_1_reg_231, icmp_ln98_1_fu_180_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_predicate_pre_block_op48 <= (icmp_ln98_1_fu_180_p2 = ap_const_lv1_0);
        else 
                        ap_predicate_pre_block_op48 <= (icmp_ln98_1_reg_231 = ap_const_lv1_0);
        end if; 
    end process;


    ap_predicate_pre_block_op53_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln98_1_reg_231, icmp_ln98_1_fu_180_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_predicate_pre_block_op53 <= (icmp_ln98_1_fu_180_p2 = ap_const_lv1_1);
        else 
                        ap_predicate_pre_block_op53 <= (icmp_ln98_1_reg_231 = ap_const_lv1_1);
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to2)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln88_fu_134_p2 <= "1" when (ap_phi_mux_ii1_phi_fu_111_p6 = ap_const_lv4_F) else "0";
    icmp_ln91_fu_128_p2 <= "1" when (ap_phi_mux_ii1_phi_fu_111_p6 = ap_const_lv4_0) else "0";
    icmp_ln98_1_fu_180_p2 <= "1" when (signed(zext_ln98_1_fu_176_p1) < signed(num2_fu_52)) else "0";
    icmp_ln98_fu_162_p2 <= "1" when (signed(zext_ln98_fu_158_p1) < signed(num2_fu_52)) else "0";
    ii_fu_122_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii1_phi_fu_111_p6) + unsigned(ap_const_lv4_1));

    inputStream_0_blk_n_assign_proc : process(inputStream_0_empty_n, icmp_ln98_reg_227, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln98_reg_227 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            inputStream_0_blk_n <= inputStream_0_empty_n;
        else 
            inputStream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputStream_0_read <= inputStream_0_read_local;

    inputStream_0_read_local_assign_proc : process(icmp_ln98_reg_227, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln98_reg_227 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            inputStream_0_read_local <= ap_const_logic_1;
        else 
            inputStream_0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    inputStream_1_blk_n_assign_proc : process(inputStream_1_empty_n, icmp_ln98_1_reg_231, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln98_1_reg_231 = ap_const_lv1_1))) then 
            inputStream_1_blk_n <= inputStream_1_empty_n;
        else 
            inputStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputStream_1_read <= inputStream_1_read_local;

    inputStream_1_read_local_assign_proc : process(icmp_ln98_1_reg_231, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln98_1_reg_231 = ap_const_lv1_1))) then 
            inputStream_1_read_local <= ap_const_logic_1;
        else 
            inputStream_1_read_local <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(icmp_ln88_fu_134_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln88_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    multicastNumStream_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, multicastNumStream_0_empty_n, icmp_ln91_reg_219, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            multicastNumStream_0_blk_n <= multicastNumStream_0_empty_n;
        else 
            multicastNumStream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    multicastNumStream_0_read <= multicastNumStream_0_read_local;

    multicastNumStream_0_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_reg_219, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln91_reg_219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            multicastNumStream_0_read_local <= ap_const_logic_1;
        else 
            multicastNumStream_0_read_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln_fu_168_p3 <= (ii1_reg_107_pp0_iter1_reg & ap_const_lv1_1);

    paddingStream_0_blk_n_assign_proc : process(icmp_ln98_reg_227, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1, ap_block_IOBlock_op45_n, ap_block_IOBlock_op40_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln98_reg_227 = ap_const_lv1_0)) then 
                paddingStream_0_blk_n <= ap_block_IOBlock_op40_n;
            elsif ((icmp_ln98_reg_227 = ap_const_lv1_1)) then 
                paddingStream_0_blk_n <= ap_block_IOBlock_op45_n;
            else 
                paddingStream_0_blk_n <= ap_const_logic_1;
            end if;
        else 
            paddingStream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    paddingStream_0_din <= paddingStream_0_din_local;

    paddingStream_0_din_local_assign_proc : process(inputStream_0_dout, icmp_ln98_reg_227, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_01001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln98_reg_227 = ap_const_lv1_1)) then 
                paddingStream_0_din_local <= inputStream_0_dout;
            elsif ((icmp_ln98_reg_227 = ap_const_lv1_0)) then 
                paddingStream_0_din_local <= ap_const_lv296_lc_1;
            else 
                paddingStream_0_din_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            paddingStream_0_din_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    paddingStream_0_write <= paddingStream_0_write_local;

    paddingStream_0_write_local_assign_proc : process(icmp_ln98_reg_227, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln98_reg_227 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln98_reg_227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            paddingStream_0_write_local <= ap_const_logic_1;
        else 
            paddingStream_0_write_local <= ap_const_logic_0;
        end if; 
    end process;


    paddingStream_1_blk_n_assign_proc : process(icmp_ln98_1_reg_231, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_grp1, ap_block_IOBlock_op48_n, ap_block_IOBlock_op53_n)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln98_1_reg_231 = ap_const_lv1_1)) then 
                paddingStream_1_blk_n <= ap_block_IOBlock_op53_n;
            elsif ((icmp_ln98_1_reg_231 = ap_const_lv1_0)) then 
                paddingStream_1_blk_n <= ap_block_IOBlock_op48_n;
            else 
                paddingStream_1_blk_n <= ap_const_logic_1;
            end if;
        else 
            paddingStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    paddingStream_1_din <= paddingStream_1_din_local;

    paddingStream_1_din_local_assign_proc : process(inputStream_1_dout, icmp_ln98_1_reg_231, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_01001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln98_1_reg_231 = ap_const_lv1_1)) then 
                paddingStream_1_din_local <= inputStream_1_dout;
            elsif ((icmp_ln98_1_reg_231 = ap_const_lv1_0)) then 
                paddingStream_1_din_local <= ap_const_lv296_lc_1;
            else 
                paddingStream_1_din_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            paddingStream_1_din_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    paddingStream_1_write <= paddingStream_1_write_local;

    paddingStream_1_write_local_assign_proc : process(icmp_ln98_1_reg_231, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln98_1_reg_231 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln98_1_reg_231 = ap_const_lv1_0)))) then 
            paddingStream_1_write_local <= ap_const_logic_1;
        else 
            paddingStream_1_write_local <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_150_p3 <= (ii1_reg_107_pp0_iter1_reg & ap_const_lv1_0);
    zext_ln98_1_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_168_p3),32));
    zext_ln98_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_150_p3),32));
end behav;
