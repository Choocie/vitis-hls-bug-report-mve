-- ==============================================================
-- Generated by Vitis HLS v2024.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity harness_inference is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    numEvents : IN STD_LOGIC_VECTOR (31 downto 0);
    inputStream_0_dout : IN STD_LOGIC_VECTOR (295 downto 0);
    inputStream_0_empty_n : IN STD_LOGIC;
    inputStream_0_read : OUT STD_LOGIC;
    inputStream_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_1_dout : IN STD_LOGIC_VECTOR (295 downto 0);
    inputStream_1_empty_n : IN STD_LOGIC;
    inputStream_1_read : OUT STD_LOGIC;
    inputStream_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inputStream_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outputStream_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    outputStream_0_full_n : IN STD_LOGIC;
    outputStream_0_write : OUT STD_LOGIC;
    outputStream_0_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    outputStream_0_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    outputStream_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    outputStream_1_full_n : IN STD_LOGIC;
    outputStream_1_write : OUT STD_LOGIC;
    outputStream_1_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    outputStream_1_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    lastStream_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    lastStream_full_n : IN STD_LOGIC;
    lastStream_almost_full_n : IN STD_LOGIC;
    lastStream_write : OUT STD_LOGIC;
    lastStream_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    lastStream_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    lastStream_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    lastStream_1_full_n : IN STD_LOGIC;
    lastStream_1_almost_full_n : IN STD_LOGIC;
    lastStream_1_write : OUT STD_LOGIC;
    lastStream_1_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    lastStream_1_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    numStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    numStream_empty_n : IN STD_LOGIC;
    numStream_read : OUT STD_LOGIC;
    numStream_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
    numStream_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of harness_inference is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_80_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_115 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_dut_fu_62_inputStream_0_read : STD_LOGIC;
    signal grp_dut_fu_62_inputStream_1_read : STD_LOGIC;
    signal grp_dut_fu_62_outputStream_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dut_fu_62_outputStream_0_write : STD_LOGIC;
    signal grp_dut_fu_62_outputStream_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dut_fu_62_outputStream_1_write : STD_LOGIC;
    signal grp_dut_fu_62_lastStream_0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_fu_62_lastStream_0_write : STD_LOGIC;
    signal grp_dut_fu_62_lastStream_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_fu_62_lastStream_1_write : STD_LOGIC;
    signal grp_dut_fu_62_numStream_read : STD_LOGIC;
    signal grp_dut_fu_62_ap_start : STD_LOGIC;
    signal grp_dut_fu_62_outputStream_0_read : STD_LOGIC;
    signal grp_dut_fu_62_outputStream_1_read : STD_LOGIC;
    signal grp_dut_fu_62_lastStream_0_read : STD_LOGIC;
    signal grp_dut_fu_62_lastStream_1_read : STD_LOGIC;
    signal grp_dut_fu_62_ap_done : STD_LOGIC;
    signal grp_dut_fu_62_ap_ready : STD_LOGIC;
    signal grp_dut_fu_62_ap_idle : STD_LOGIC;
    signal grp_dut_fu_62_ap_continue : STD_LOGIC;
    signal grp_dut_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln87_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_reg_grp_dut_fu_62_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dut_fu_62_ap_done : STD_LOGIC := '0';
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_grp_dut_fu_62_ap_ready : STD_LOGIC;
    signal e_fu_52 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal e_4_fu_92_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component harness_dut IS
    port (
        inputStream_0_dout : IN STD_LOGIC_VECTOR (295 downto 0);
        inputStream_0_empty_n : IN STD_LOGIC;
        inputStream_0_read : OUT STD_LOGIC;
        inputStream_1_dout : IN STD_LOGIC_VECTOR (295 downto 0);
        inputStream_1_empty_n : IN STD_LOGIC;
        inputStream_1_read : OUT STD_LOGIC;
        outputStream_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        outputStream_0_full_n : IN STD_LOGIC;
        outputStream_0_write : OUT STD_LOGIC;
        outputStream_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        outputStream_1_full_n : IN STD_LOGIC;
        outputStream_1_write : OUT STD_LOGIC;
        lastStream_0_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        lastStream_0_full_n : IN STD_LOGIC;
        lastStream_0_write : OUT STD_LOGIC;
        lastStream_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        lastStream_1_full_n : IN STD_LOGIC;
        lastStream_1_write : OUT STD_LOGIC;
        numStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        numStream_empty_n : IN STD_LOGIC;
        numStream_read : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        outputStream_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        outputStream_0_empty_n : IN STD_LOGIC;
        outputStream_0_read : OUT STD_LOGIC;
        outputStream_0_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        outputStream_0_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
        outputStream_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        outputStream_1_empty_n : IN STD_LOGIC;
        outputStream_1_read : OUT STD_LOGIC;
        outputStream_1_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        outputStream_1_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
        lastStream_0_almost_full_n : IN STD_LOGIC;
        lastStream_0_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        lastStream_0_empty_n : IN STD_LOGIC;
        lastStream_0_almost_empty_n : IN STD_LOGIC;
        lastStream_0_read : OUT STD_LOGIC;
        lastStream_0_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        lastStream_0_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
        lastStream_1_almost_full_n : IN STD_LOGIC;
        lastStream_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        lastStream_1_empty_n : IN STD_LOGIC;
        lastStream_1_almost_empty_n : IN STD_LOGIC;
        lastStream_1_read : OUT STD_LOGIC;
        lastStream_1_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        lastStream_1_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_dut_fu_62 : component harness_dut
    port map (
        inputStream_0_dout => inputStream_0_dout,
        inputStream_0_empty_n => inputStream_0_empty_n,
        inputStream_0_read => grp_dut_fu_62_inputStream_0_read,
        inputStream_1_dout => inputStream_1_dout,
        inputStream_1_empty_n => inputStream_1_empty_n,
        inputStream_1_read => grp_dut_fu_62_inputStream_1_read,
        outputStream_0_din => grp_dut_fu_62_outputStream_0_din,
        outputStream_0_full_n => outputStream_0_full_n,
        outputStream_0_write => grp_dut_fu_62_outputStream_0_write,
        outputStream_1_din => grp_dut_fu_62_outputStream_1_din,
        outputStream_1_full_n => outputStream_1_full_n,
        outputStream_1_write => grp_dut_fu_62_outputStream_1_write,
        lastStream_0_din => grp_dut_fu_62_lastStream_0_din,
        lastStream_0_full_n => lastStream_full_n,
        lastStream_0_write => grp_dut_fu_62_lastStream_0_write,
        lastStream_1_din => grp_dut_fu_62_lastStream_1_din,
        lastStream_1_full_n => lastStream_1_full_n,
        lastStream_1_write => grp_dut_fu_62_lastStream_1_write,
        numStream_dout => numStream_dout,
        numStream_empty_n => numStream_empty_n,
        numStream_read => grp_dut_fu_62_numStream_read,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_fu_62_ap_start,
        outputStream_0_dout => ap_const_lv128_lc_1,
        outputStream_0_empty_n => ap_const_logic_1,
        outputStream_0_read => grp_dut_fu_62_outputStream_0_read,
        outputStream_0_num_data_valid => outputStream_0_num_data_valid,
        outputStream_0_fifo_cap => outputStream_0_fifo_cap,
        outputStream_1_dout => ap_const_lv128_lc_1,
        outputStream_1_empty_n => ap_const_logic_1,
        outputStream_1_read => grp_dut_fu_62_outputStream_1_read,
        outputStream_1_num_data_valid => outputStream_1_num_data_valid,
        outputStream_1_fifo_cap => outputStream_1_fifo_cap,
        lastStream_0_almost_full_n => lastStream_almost_full_n,
        lastStream_0_dout => ap_const_lv1_0,
        lastStream_0_empty_n => ap_const_logic_1,
        lastStream_0_almost_empty_n => ap_const_logic_1,
        lastStream_0_read => grp_dut_fu_62_lastStream_0_read,
        lastStream_0_num_data_valid => lastStream_num_data_valid,
        lastStream_0_fifo_cap => lastStream_fifo_cap,
        lastStream_1_almost_full_n => lastStream_1_almost_full_n,
        lastStream_1_dout => ap_const_lv1_0,
        lastStream_1_empty_n => ap_const_logic_1,
        lastStream_1_almost_empty_n => ap_const_logic_1,
        lastStream_1_read => grp_dut_fu_62_lastStream_1_read,
        lastStream_1_num_data_valid => lastStream_1_num_data_valid,
        lastStream_1_fifo_cap => lastStream_1_fifo_cap,
        ap_done => grp_dut_fu_62_ap_done,
        ap_ready => grp_dut_fu_62_ap_ready,
        ap_idle => grp_dut_fu_62_ap_idle,
        ap_continue => grp_dut_fu_62_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_98_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dut_fu_62_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dut_fu_62_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_dut_fu_62_ap_done <= ap_const_logic_0;
                elsif ((grp_dut_fu_62_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dut_fu_62_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dut_fu_62_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dut_fu_62_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_dut_fu_62_ap_ready <= ap_const_logic_0;
                elsif ((grp_dut_fu_62_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dut_fu_62_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dut_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sync_grp_dut_fu_62_ap_ready = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_98_p2 = ap_const_lv1_0)))) then 
                    grp_dut_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_dut_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    e_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                e_fu_52 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_98_p2 = ap_const_lv1_0))) then 
                e_fu_52 <= e_4_fu_92_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_115 <= empty_fu_80_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state2, icmp_ln87_fu_98_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_98_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_reg_grp_dut_fu_62_ap_ready, ap_sync_reg_grp_dut_fu_62_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_reg_grp_dut_fu_62_ap_ready and ap_sync_reg_grp_dut_fu_62_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln87_fu_98_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_98_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln87_fu_98_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln87_fu_98_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dut_fu_62_ap_ready <= (grp_dut_fu_62_ap_ready or ap_sync_reg_grp_dut_fu_62_ap_ready);
    e_4_fu_92_p2 <= std_logic_vector(unsigned(e_fu_52) + unsigned(ap_const_lv31_1));
    empty_fu_80_p1 <= numEvents(31 - 1 downto 0);

    grp_dut_fu_62_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_dut_fu_62_ap_continue <= ap_const_logic_1;
        else 
            grp_dut_fu_62_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dut_fu_62_ap_start <= grp_dut_fu_62_ap_start_reg;
    icmp_ln87_fu_98_p2 <= "1" when (e_fu_52 = empty_reg_115) else "0";
    inputStream_0_read <= grp_dut_fu_62_inputStream_0_read;
    inputStream_1_read <= grp_dut_fu_62_inputStream_1_read;
    lastStream_1_din <= grp_dut_fu_62_lastStream_1_din;
    lastStream_1_write <= grp_dut_fu_62_lastStream_1_write;
    lastStream_din <= grp_dut_fu_62_lastStream_0_din;
    lastStream_write <= grp_dut_fu_62_lastStream_0_write;
    numStream_read <= grp_dut_fu_62_numStream_read;
    outputStream_0_din <= grp_dut_fu_62_outputStream_0_din;
    outputStream_0_write <= grp_dut_fu_62_outputStream_0_write;
    outputStream_1_din <= grp_dut_fu_62_outputStream_1_din;
    outputStream_1_write <= grp_dut_fu_62_outputStream_1_write;
end behav;
