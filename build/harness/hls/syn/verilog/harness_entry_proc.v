// ==============================================================
// Generated by Vitis HLS v2024.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module harness_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outputNumList,
        outputNumList_c_din,
        outputNumList_c_full_n,
        outputNumList_c_write,
        outputNumList_c_num_data_valid,
        outputNumList_c_fifo_cap,
        outFeatureList,
        outFeatureList_c_din,
        outFeatureList_c_full_n,
        outFeatureList_c_write,
        outFeatureList_c_num_data_valid,
        outFeatureList_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] outputNumList;
output  [63:0] outputNumList_c_din;
input   outputNumList_c_full_n;
output   outputNumList_c_write;
input  [2:0] outputNumList_c_num_data_valid;
input  [2:0] outputNumList_c_fifo_cap;
input  [63:0] outFeatureList;
output  [63:0] outFeatureList_c_din;
input   outFeatureList_c_full_n;
output   outFeatureList_c_write;
input  [2:0] outFeatureList_c_num_data_valid;
input  [2:0] outFeatureList_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    outputNumList_c_blk_n;
reg    outFeatureList_c_blk_n;
reg    ap_block_state1;
reg    outFeatureList_c_write_local;
reg    outputNumList_c_write_local;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outFeatureList_c_blk_n = outFeatureList_c_full_n;
    end else begin
        outFeatureList_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        outFeatureList_c_write_local = 1'b1;
    end else begin
        outFeatureList_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputNumList_c_blk_n = outputNumList_c_full_n;
    end else begin
        outputNumList_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        outputNumList_c_write_local = 1'b1;
    end else begin
        outputNumList_c_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (outFeatureList_c_full_n == 1'b0) | (outputNumList_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign outFeatureList_c_din = outFeatureList;

assign outFeatureList_c_write = outFeatureList_c_write_local;

assign outputNumList_c_din = outputNumList;

assign outputNumList_c_write = outputNumList_c_write_local;

endmodule //harness_entry_proc
